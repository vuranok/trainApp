<?xml version="1.0" encoding="UTF-8"?>

<!-- 
Serves the same purpose as the one we used for MessageSupportFactory

beans: Default namespace. Is used to declare the beans that need to be managed by Spring, 
	 and its dependency requirements for Spring to resolve and inject those dependencies.
	
p: inform Spring about the DI requirement. The p namespace is not defined in an XSD file and exists only in Spring core; therefore, no XSD is declared in
the schemaLocation attribute

Best practice: when declaring a Spring XSD location, it's best practice to not include the version number. 
	This also prevents you from having to modify all of your bean files when upgrading to a new version of Spring. 
-->

<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<!--  
	<bean id="provider" class="com.isbank.spring.basics.HelloWorldMessageProvider"/>
-->
	<bean id="provider" class="com.isbank.spring.basics.ConfigurableMessageProvider">
		<constructor-arg value="Message from app-context.xml"/>
	</bean>

	<!-- tells Spring that the beanâ€™s property, messageProvider, should be injected with another bean --> 
	<bean id="renderer" class="com.isbank.spring.basics.StandardOutMessageRenderer"
		p:messageProvider-ref="provider"/>
		
	<!-- Used for setter injection 
	<bean id="renderer" class="com.isbank.spring.basics.StandardOutMessageRenderer">
		<property name="messageProvider" ref="provider"></property> 
	</bean> -->

</beans>
