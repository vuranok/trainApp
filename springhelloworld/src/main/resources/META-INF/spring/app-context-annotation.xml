<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd">
		
<!-- 
The <context:component-scan> tag tells Spring to scan the code for injectable beans annotated with @Component,
@Controller, @Repository, and @Service as well as supporting the @Autowired and @Inject annotations under the
package (and all its subpackages) specified. In the <context:component-scan> tag, multiple packages can be defined
by using either a comma, a semicolon, or a space as the delimiter.
 -->

<!--  
	<context:component-scan base-package="com.isbank.spring.annotation" />
-->
	<context:component-scan base-package="com.isbank.spring.consinject" />

<!--
	<context:component-scan base-package="com.apress.prospring4.ch3.annotation" >
		<context:exclude-filter type="assignable" expression="com.example.NotAService"/>
	</context:component-scan>
The previous tag tells Spring to scan the package as specified but omit the classes that were assignable to the
type as specified in the expression (can be either a class or an interface). Besides the exclude filter, you can also use
an include filter. And for the type, you can use annotation, regex, assignable, AspectJ, or custom (with your own filter
class that implements org.springframework.core.type.filter.TypeFilter) as the filter criteria. The expression
format depends on the type you specified.
 -->
 	
</beans>